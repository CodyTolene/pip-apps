function Piptris() {
  function B() {
    for (let a = i - 1; a >= 0; a--) {
      let c = !0;
      for (let d = 0; d < b; d++)
        if (!p(d, a)) {
          c = !1;
          break;
        }
      if (c) {
        for (let c = a; c > 0; c--)
          for (let a = 0; a < b; a++) s(a, c, p(a, c - 1));
        for (let a = 0; a < b; a++) s(a, 0, 0);
        (o += 100), a++;
      }
    }
  }
  function k(a) {
    for (let c = 0; c < a.shape.length; c++)
      for (let d = 0; d < a.shape[c].length; d++)
        if (a.shape[c][d]) {
          const e = a.x + d;
          const f = a.y + c;
          if (e < 0 || e >= b || f >= i || (f >= 0 && p(e, f))) return !0;
        }
    return !1;
  }
  function C(a, b) {
    bC.setColor(3),
      bC.fillRect(
        e + a * c,
        f + b * c,
        e + (a + 1) * c - 1,
        f + (b + 1) * c - 1,
      );
  }
  function J() {
    bC.setColor(2), bC.drawRect(e, f, e + b * c - 1, f + i * c - 1);
  }
  function l() {
    if (d) return;
    bC.clear(1), J(), M(), L(), O(), N();
    for (let a = 0; a < i; a++) for (let c = 0; c < b; c++) p(c, a) && C(c, a);
    if (a)
      for (let b = 0; b < a.shape.length; b++) {
        const c = a.shape[b];
        for (let d = 0; d < c.length; d++) c[d] && C(a.x + d, a.y + b);
      }
    bC.flip();
  }
  function K(e, f, g) {
    bC.setColor(3);
    const d = 2 * g;
    const c = 4 * g;
    const h = 3 * g;
    const i = 1 * g;
    const a = c * 0.707;
    const b = (a, b) =>
      bC.fillRect(e + a - d / 2, f + b - d / 2, e + a + d / 2, f + b + d / 2);
    b(-c, 0),
      b(c, 0),
      b(0, -c),
      b(0, c),
      b(-a, -a),
      b(a, -a),
      b(-a, a),
      b(a, a),
      bC.fillCircle(e, f, h),
      bC.setColor(0),
      bC.fillCircle(e, f, i);
  }
  function L() {
    if (!h) return;
    bC.setColor(3), bC.setFontMonofonto18();
    const a = e + b * c + 10;
    bC.drawString('Next:', a, f);
    for (let b = 0; b < h.shape.length; b++) {
      const d = h.shape[b];
      for (let e = 0; e < d.length; e++)
        d[e] &&
          bC.fillRect(
            a + e * c,
            f + 20 + b * c,
            a + (e + 1) * c - 1,
            f + 20 + (b + 1) * c - 1,
          );
    }
  }
  function M() {
    bC.setColor(3),
      bC.setFontMonofonto18(),
      bC.drawString('Score:', e - 80, f),
      bC.drawString(o.toString(), e - 80, f + 20);
  }
  function N() {
    bC.setColor(3),
      bC.setFontMonofonto16(),
      bC.drawString(G, e - 80, bC.getHeight() - 30);
  }
  function O() {
    bC.setColor(3), bC.setFontMonofonto16();
    const a = e + b * c + 10;
    bC.drawString('v' + H, a, bC.getHeight() - 30);
  }
  function D() {
    if (!a || d) return;
    a.y++, k(a) && (a.y--, F(a), B(), t()), l();
  }
  function P() {
    if (!a || d) return;
    while (!0)
      if ((a.y++, k(a))) {
        a.y--;
        break;
      }
    F(a), B(), t(), l();
  }
  function Q() {
    clearInterval(j),
      clearInterval(n),
      (d = !0),
      bC.clear(1),
      bC.setColor(3),
      bC.setFontMonofonto23(),
      bC.drawString('GAME OVER', 120, 40),
      bC.setFontMonofonto18(),
      bC.drawString('Score: ' + o, 120, 70),
      bC.setFontMonofonto16(),
      bC.drawString('Press    to restart', 120, 100),
      K(175, 110, 2),
      bC.flip(),
      g && clearInterval(g),
      (g = setInterval(() => {
        BTN_PLAY.read() && (clearInterval(g), q());
      }, 100));
  }
  function p(a, c) {
    return m[c * b + a];
  }
  function r() {
    const a = A[Math.floor(Math.random() * A.length)];
    const c = Math.floor((b - a[0].length) / 2);
    return { shape: a, x: c, y: 0 };
  }
  function F(a) {
    for (let b = 0; b < a.shape.length; b++) {
      const c = a.shape[b];
      for (let d = 0; d < c.length; d++) c[d] && s(a.x + d, a.y + b, 1);
    }
  }
  function R(e) {
    if (d || !a) return;
    const c = a.x + e;
    if (c < 0 || c + a.shape[0].length > b) return;
    (a.x = c), k(a) && (a.x -= e), l();
  }
  function S() {
    for (let a = 0; a < m.length; a++) m[a] = 0;
  }
  function q() {
    g && clearInterval(g),
      j && clearInterval(j),
      n && clearInterval(n),
      (d = !1),
      (o = 0),
      S(),
      (h = r()),
      t(),
      l(),
      (j = setInterval(() => D(), I)),
      (n = setInterval(() => {
        !d && BTN_PLAY.read() && D();
      }, 100));
  }
  function T(f) {
    if (d) return;
    const b = a.shape;
    const c =
      f > 0
        ? b[0].map((c, a) => b.map((b) => b[b.length - 1 - a]))
        : b[0].map((c, a) => b.map((b) => b[a]).reverse());
    const e = a.shape;
    (a.shape = c), k(a) && (a.shape = e), l();
  }
  function s(a, c, d) {
    m[c * b + a] = d;
  }
  function t() {
    (a = h || r()), (h = r()), k(a) && Q();
  }
  const u = {};
  const G = 'Piptris';
  const H = '1.1.1';
  const c = 10;
  const I = 800;
  const i = 20;
  const b = 16;
  const m = new Uint8Array(b * i);
  const e = 120;
  const f = 0;
  let g = null;
  let n = null;
  let a = null;
  let j = null;
  let d = !1;
  let h = null;
  let o = 0;
  const v = 100;
  const w = 'knob1';
  const x = 'knob2';
  let y = 0;
  let z = 0;
  const A = [
    [
      [1, 1, 0],
      [0, 1, 1],
    ],
    [
      [0, 1, 1],
      [1, 1, 0],
    ],
    [
      [1, 0, 0],
      [1, 1, 1],
    ],
    [
      [0, 0, 1],
      [1, 1, 1],
    ],
    [
      [0, 1, 0],
      [1, 1, 1],
    ],
    [[1, 1, 1, 1]],
    [
      [1, 1],
      [1, 1],
    ],
  ];
  return (
    (u.run = function () {
      Pip.removeAllListeners(w),
        Pip.removeAllListeners(x),
        Pip.on(w, (b) => {
          const a = Date.now();
          if (a - y < v) return;
          (y = a), b === 0 ? (d ? q() : P()) : T(b);
        }),
        Pip.on(x, (b) => {
          const a = Date.now();
          if (a - z < v) return;
          (z = a), d && b === 0 ? q() : R(b > 0 ? 1 : -1);
        }),
        setWatch(
          () => {
            clearInterval(j),
              g && clearInterval(g),
              bC.clear(1).flip(),
              E.reboot();
          },
          BTN_TORCH,
          { repeat: !0, edge: 'rising', debounce: 10 },
        ),
        q();
    }),
    u
  );
}
Piptris().run();
