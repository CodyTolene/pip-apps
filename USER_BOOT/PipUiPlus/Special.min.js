{
  const a = (t, e) => ((t % e) + e) % e,
    b = (t, e, i) => a(t - e, i - e + 1) + e;
  class c {
    constructor(t, e) {
      (this.rows = e),
        (this.options = t =
          Object.assign({ x1: 10, x2: -20, y1: 0, y2: -1, compact: !1 }, t)),
        (t.x1 = a(t.x1, bC.getWidth())),
        (t.x2 = a(t.x2, bC.getWidth())),
        (t.y1 = a(t.y1, bC.getHeight())),
        (t.y2 = a(t.y2, bC.getHeight())),
        (this.selectedIndex = 0),
        (this.isEditing = !1);
    }
    get selectedRow() {
      return this.rows[this.selectedIndex];
    }
    draw() {
      bC.reset(),
        this.options.compact
          ? bC.setFontMonofonto16()
          : bC.setFontMonofonto18();
      var e = this.options.x1,
        i = this.options.x2,
        s = this.options.y1,
        t = this.options.y2,
        o = (i + e) >> 1,
        n = 10,
        r = this.options.compact ? 25 : 27,
        h = (r - bC.getFontHeight()) >> 1,
        a = 0 | Math.min((t - s - 20) / r, this.rows.length),
        l = E.clip(this.selectedIndex - (a >> 1), 0, this.rows.length - a);
      bC.setColor(0 < l ? 3 : 0).fillPoly([o - n, s + n, o + n, s + n, o, s]);
      for (let t = 0; t < a; ++t) {
        var c = l + t,
          d = this.rows[c],
          c = c == this.selectedIndex,
          p = c && !this.isEditing,
          g = s + n + r * t,
          u = g + r - 1;
        bC
          .setBgColor(p ? 3 : 0)
          .clearRect(e, g, i, u)
          .setColor(p ? 0 : 3)
          .setFontAlign(-1, -1)
          .drawString(d.title, e + 20, g + h),
          null != d.value &&
            ((p = d.format ? d.format(d.value) : d.value),
            (c = (d = c && this.isEditing) ? i - 24 : i),
            d &&
              bC
                .setBgColor(3)
                .clearRect(c - bC.stringWidth(p) - 6, g, i, u)
                .setColor(0)
                .drawImage(
                  {
                    width: 12,
                    height: 5,
                    buffer: '\x20\x07\x00\xf9\xf0\x0e\x00\x40',
                    transparent: 0,
                  },
                  c,
                  g + ((r - 10) >> 1),
                  { scale: 2 },
                ),
            bC.setFontAlign(1, -1).drawString(p.toString(), c - 3, g + h));
      }
      t = s + n + r * a;
      bC.setColor(l + a < this.rows.length ? 3 : 0)
        .fillPoly([o - n, t, o + n, t, o, t + n])
        .flip();
    }
    move(t) {
      if (this.isEditing) {
        var e = this.selectedRow,
          i = e.value;
        if (
          ((e.value -= t * (e.step || 1)),
          (e.value = e.wrap
            ? b(e.value, e.min, e.max)
            : E.clip(e.value, e.min, e.max)),
          e.value == i)
        )
          return;
        e.onchange && e.onchange(e.value, -t);
      } else {
        i = this.selectedIndex;
        if (
          ((this.selectedIndex = E.clip(
            this.selectedIndex + t,
            0,
            this.rows.length - 1,
          )),
          i == this.selectedIndex)
        )
          return;
        this.selectedRow.onselect && this.selectedRow.onselect(this),
          Pip.knob1Click(t);
      }
      this.draw();
    }
    click() {
      var t = this.selectedRow,
        e = (Pip.audioStartVar(Pip.audioBuiltin('OK')), (typeof t.value)[0]);
      'n' == e
        ? (this.isEditing = !this.isEditing)
        : ('b' == e && (t.value = !t.value), t.onchange && t.onchange(t.value)),
        this.draw();
    }
    handleKnob1(t) {
      t ? this.move(-t) : this.click();
    }
    show() {
      Pip.removeSubmenu && Pip.removeSubmenu(),
        bC.clear(1),
        this.selectedRow.onselect && this.selectedRow.onselect(this),
        this.draw();
      const t = this.handleKnob1.bind(this);
      Pip.addListener('knob1', t),
        (Pip.removeSubmenu = () => {
          Pip.removeListener('knob1', t), Pip.videoStop();
        });
    }
  }
  class d {
    constructor(t, e) {
      (this.path = t), (this.title = e.t);
    }
    read() {
      return JSON.parse(fs.readFile(this.path));
    }
    write(t) {
      fs.writeFile(this.path, JSON.stringify(t));
    }
    onselect(t) {
      var e = this.read(),
        i = t.options.x2 + 10,
        s = bC.getWidth() - i,
        t = t.options.x2,
        o = bC.getWidth() - 10;
      Pip.videoStop(),
        Pip.videoStart(e.f, {
          x: 40 + ((t + o - e.w) >> 1),
          y: 65 + Math.max(0, 120 - e.h),
          repeat: !0,
        }),
        bC
          .reset()
          .setFont('Vector', 12)
          .clearRect(i, 130, bC.getWidth(), bC.getHeight())
          .drawString(bC.wrapString(e.d, s).join('\n'), i, 130);
    }
  }
  class e extends d {
    constructor(t, e) {
      super(t, e), (this.value = e.v);
    }
    onchange(t) {
      var e = this.read();
      (e.v = t), this.write(e);
    }
  }
  class f extends e {
    constructor(t, e) {
      super(t, e), (this.min = 1), (this.max = 10);
    }
  }
  const g = 'USER_BOOT/PipUiPlus/Special';
  new c(
    { x2: 180, compact: !0 },
    fs
      .readdir(g)
      .filter((t) => t.endsWith('.json'))
      .map((t) => g + '/' + t)
      .map((t) => new f(t, JSON.parse(fs.readFile(t)))),
  ).show();
}
